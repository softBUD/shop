{"ast":null,"code":"import axios from 'axios';\nimport React from 'react';\nimport { USER_SERVER } from '../Config.js';\nimport { LOGIN_USER, SIGNUP_USER, AUTH_USER, ADD_TO_CART, GET_CART_ITEMS } from './types';\nexport function loginUser(dataToSubmit) {\n  const request = axios.post(`/api/user/login`, dataToSubmit) //데이터저장\n  .then(response => response.data);\n  return {\n    type: LOGIN_USER,\n    payload: request //reducer에서 previousState와 action을 조합해서 nextState를 return 한다\n\n  };\n}\nexport function signUpUser(dataToSubmit) {\n  const request = axios.post(`/api/user/signup`, dataToSubmit) //데이터저장\n  .then(response => response.data);\n  return {\n    type: SIGNUP_USER,\n    payload: request\n  };\n}\nexport function auth() {\n  //get메소드이므로 body부분 불필요\n  const request = axios.get(`/api/user/auth`).then(response => response.data);\n  return {\n    type: AUTH_USER,\n    payload: request\n  };\n}\nexport function addToCart(id, option) {\n  let body = {\n    productId: id,\n    productOp: option\n  };\n  const request = axios.post(`/api/product/addToCart`, body).then(response => response.data);\n  return {\n    type: ADD_TO_CART,\n    payload: request\n  };\n}\nexport function getCartItems(cartItems, userCart) {\n  //상품 아이디와 상품정보를 여러개 가져옴\n  const request = axios.get(`/api/product/products_by_id?id=${cartItems}&type=array`).then(response => //cartItem(상품 아이디값들)에 해당하는 정보들을\n  //product Cllection에서 가져온 후\n  //수량 정보를 넣어준다.\n  userCart.forEach((cartProduct, index) => {\n    response.data.forEach((productData, index) => {\n      if (cartProduct.id === productData._id) {\n        response.data[index].quantity = cartProduct.quantity;\n      }\n    });\n  }));\n  return {\n    type: GET_CART_ITEMS,\n    payload: request\n  };\n}","map":{"version":3,"sources":["C:/webshop/shopping/src/_actions/user_action.js"],"names":["axios","React","USER_SERVER","LOGIN_USER","SIGNUP_USER","AUTH_USER","ADD_TO_CART","GET_CART_ITEMS","loginUser","dataToSubmit","request","post","then","response","data","type","payload","signUpUser","auth","get","addToCart","id","option","body","productId","productOp","getCartItems","cartItems","userCart","forEach","cartProduct","index","productData","_id","quantity"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,SAAQC,UAAR,EAAoBC,WAApB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,cAAzD,QAA8E,SAA9E;AAEA,OAAO,SAASC,SAAT,CAAmBC,YAAnB,EAAiC;AACpC,QAAMC,OAAO,GAAGV,KAAK,CAACW,IAAN,CAAY,iBAAZ,EAA6BF,YAA7B,EAA2C;AAA3C,GACfG,IADe,CACVC,QAAQ,IAAIA,QAAQ,CAACC,IADX,CAAhB;AAEA,SAAO;AACHC,IAAAA,IAAI,EAACZ,UADF;AAEHa,IAAAA,OAAO,EAAEN,OAFN,CAGH;;AAHG,GAAP;AAKH;AAED,OAAO,SAASO,UAAT,CAAoBR,YAApB,EAAkC;AACrC,QAAMC,OAAO,GAAGV,KAAK,CAACW,IAAN,CAAY,kBAAZ,EAA8BF,YAA9B,EAA4C;AAA5C,GACfG,IADe,CACVC,QAAQ,IAAIA,QAAQ,CAACC,IADX,CAAhB;AAEA,SAAO;AACHC,IAAAA,IAAI,EAACX,WADF;AAEHY,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH;AAED,OAAO,SAASQ,IAAT,GAAgB;AAAE;AACrB,QAAMR,OAAO,GAAGV,KAAK,CAACmB,GAAN,CAAW,gBAAX,EACfP,IADe,CACVC,QAAQ,IAAIA,QAAQ,CAACC,IADX,CAAhB;AAEA,SAAO;AACHC,IAAAA,IAAI,EAACV,SADF;AAEHW,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH;AAED,OAAO,SAASU,SAAT,CAAmBC,EAAnB,EAAsBC,MAAtB,EAA8B;AACjC,MAAIC,IAAI,GAAG;AACPC,IAAAA,SAAS,EAAGH,EADL;AAEPI,IAAAA,SAAS,EAAEH;AAFJ,GAAX;AAIA,QAAMZ,OAAO,GAAGV,KAAK,CAACW,IAAN,CAAY,wBAAZ,EAAoCY,IAApC,EACfX,IADe,CACVC,QAAQ,IAAIA,QAAQ,CAACC,IADX,CAAhB;AAEA,SAAO;AACHC,IAAAA,IAAI,EAACT,WADF;AAEHU,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH;AAED,OAAO,SAASgB,YAAT,CAAsBC,SAAtB,EAAgCC,QAAhC,EAA0C;AAC7C;AACA,QAAMlB,OAAO,GAAGV,KAAK,CAACmB,GAAN,CAAW,kCAAiCQ,SAAU,aAAtD,EACff,IADe,CACVC,QAAQ,IACV;AACA;AACA;AACAe,EAAAA,QAAQ,CAACC,OAAT,CAAiB,CAACC,WAAD,EAAcC,KAAd,KAAwB;AACrClB,IAAAA,QAAQ,CAACC,IAAT,CAAce,OAAd,CAAsB,CAACG,WAAD,EAAcD,KAAd,KAAsB;AACxC,UAAGD,WAAW,CAACT,EAAZ,KAAmBW,WAAW,CAACC,GAAlC,EAAuC;AACnCpB,QAAAA,QAAQ,CAACC,IAAT,CAAciB,KAAd,EAAqBG,QAArB,GAAgCJ,WAAW,CAACI,QAA5C;AACH;AACJ,KAJD;AAKH,GAND,CALY,CAAhB;AAaA,SAAO;AACHnB,IAAAA,IAAI,EAACR,cADF;AAEHS,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\nimport {USER_SERVER} from '../Config.js';\r\nimport {LOGIN_USER, SIGNUP_USER, AUTH_USER, ADD_TO_CART, GET_CART_ITEMS} from './types';\r\n\r\nexport function loginUser(dataToSubmit) {\r\n    const request = axios.post(`/api/user/login`,dataToSubmit) //데이터저장\r\n    .then(response => response.data)\r\n    return {\r\n        type:LOGIN_USER,\r\n        payload: request\r\n        //reducer에서 previousState와 action을 조합해서 nextState를 return 한다\r\n    }\r\n}\r\n\r\nexport function signUpUser(dataToSubmit) {\r\n    const request = axios.post(`/api/user/signup`,dataToSubmit) //데이터저장\r\n    .then(response => response.data)\r\n    return {\r\n        type:SIGNUP_USER,\r\n        payload: request\r\n    }\r\n}\r\n\r\nexport function auth() { //get메소드이므로 body부분 불필요\r\n    const request = axios.get(`/api/user/auth`)\r\n    .then(response => response.data)\r\n    return {\r\n        type:AUTH_USER,\r\n        payload: request\r\n    }\r\n}\r\n\r\nexport function addToCart(id,option) {\r\n    let body = {\r\n        productId : id,\r\n        productOp: option\r\n    }\r\n    const request = axios.post(`/api/product/addToCart`,body)\r\n    .then(response => response.data)\r\n    return {\r\n        type:ADD_TO_CART,\r\n        payload: request\r\n    }\r\n}\r\n\r\nexport function getCartItems(cartItems,userCart) {\r\n    //상품 아이디와 상품정보를 여러개 가져옴\r\n    const request = axios.get(`/api/product/products_by_id?id=${cartItems}&type=array`)\r\n    .then(response => \r\n        //cartItem(상품 아이디값들)에 해당하는 정보들을\r\n        //product Cllection에서 가져온 후\r\n        //수량 정보를 넣어준다.\r\n        userCart.forEach((cartProduct, index) => {\r\n            response.data.forEach((productData, index)=>{\r\n                if(cartProduct.id === productData._id) {\r\n                    response.data[index].quantity = cartProduct.quantity\r\n                }\r\n            })\r\n        })\r\n        )\r\n    return {\r\n        type:GET_CART_ITEMS,\r\n        payload: request\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}