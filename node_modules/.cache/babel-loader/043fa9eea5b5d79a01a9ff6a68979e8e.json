{"ast":null,"code":"import axios from'axios';import React from'react';import{USER_SERVER}from'../Config.js';import{LOGIN_USER,SIGNUP_USER,AUTH_USER,ADD_TO_CART,GET_CART_ITEMS}from'./types';export function loginUser(dataToSubmit){var request=axios.post(\"/api/user/login\",dataToSubmit)//데이터저장\n.then(function(response){return response.data;});return{type:LOGIN_USER,payload:request//reducer에서 previousState와 action을 조합해서 nextState를 return 한다\n};}export function signUpUser(dataToSubmit){var request=axios.post(\"/api/user/signup\",dataToSubmit)//데이터저장\n.then(function(response){return response.data;});return{type:SIGNUP_USER,payload:request};}export function auth(){//get메소드이므로 body부분 불필요\nvar request=axios.get(\"/api/user/auth\").then(function(response){return response.data;});return{type:AUTH_USER,payload:request};}export function addToCart(id,option){var body={productId:id,productOp:option};var request=axios.post(\"/api/product/addToCart\",body).then(function(response){return response.data;});return{type:ADD_TO_CART,payload:request};}export function getCartItems(cartItems,userCart){//상품 아이디와 상품정보를 여러개 가져옴\nvar request=axios.get(\"/api/product/products_by_id?id=\".concat(cartItems,\"&type=array\")).then(function(response){//cartItem(상품 아이디값들)에 해당하는 정보들을\n//product Cllection에서 가져온 후\n//수량 정보를 넣어준다.\nuserCart.forEach(function(userCart,index){//가져온 user > userData > 카트안의 데이터들\nresponse.data.forEach(function(productData,index){//가져온 상품정보 데이터들\n//유저 데이터 안에 있는 cart id값이 문자열로 저장되어있다.\nif(parseInt(userCart.id)===productData._id){response.data[index].quantity=userCart.quantity;}});});return response.data;});return{type:GET_CART_ITEMS,payload:request};}","map":{"version":3,"sources":["C:/webshop/shopping/src/_actions/user_action.js"],"names":["axios","React","USER_SERVER","LOGIN_USER","SIGNUP_USER","AUTH_USER","ADD_TO_CART","GET_CART_ITEMS","loginUser","dataToSubmit","request","post","then","response","data","type","payload","signUpUser","auth","get","addToCart","id","option","body","productId","productOp","getCartItems","cartItems","userCart","forEach","index","productData","parseInt","_id","quantity"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,WAAR,KAA0B,cAA1B,CACA,OAAQC,UAAR,CAAoBC,WAApB,CAAiCC,SAAjC,CAA4CC,WAA5C,CAAyDC,cAAzD,KAA8E,SAA9E,CAEA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,YAAnB,CAAiC,CACpC,GAAMC,CAAAA,OAAO,CAAGV,KAAK,CAACW,IAAN,mBAA6BF,YAA7B,CAA2C;AAA3C,CACfG,IADe,CACV,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EADE,CAAhB,CAEA,MAAO,CACHC,IAAI,CAACZ,UADF,CAEHa,OAAO,CAAEN,OACT;AAHG,CAAP,CAKH,CAED,MAAO,SAASO,CAAAA,UAAT,CAAoBR,YAApB,CAAkC,CACrC,GAAMC,CAAAA,OAAO,CAAGV,KAAK,CAACW,IAAN,oBAA8BF,YAA9B,CAA4C;AAA5C,CACfG,IADe,CACV,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EADE,CAAhB,CAEA,MAAO,CACHC,IAAI,CAACX,WADF,CAEHY,OAAO,CAAEN,OAFN,CAAP,CAIH,CAED,MAAO,SAASQ,CAAAA,IAAT,EAAgB,CAAE;AACrB,GAAMR,CAAAA,OAAO,CAAGV,KAAK,CAACmB,GAAN,mBACfP,IADe,CACV,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EADE,CAAhB,CAEA,MAAO,CACHC,IAAI,CAACV,SADF,CAEHW,OAAO,CAAEN,OAFN,CAAP,CAIH,CAED,MAAO,SAASU,CAAAA,SAAT,CAAmBC,EAAnB,CAAsBC,MAAtB,CAA8B,CACjC,GAAIC,CAAAA,IAAI,CAAG,CACPC,SAAS,CAAGH,EADL,CAEPI,SAAS,CAAEH,MAFJ,CAAX,CAIA,GAAMZ,CAAAA,OAAO,CAAGV,KAAK,CAACW,IAAN,0BAAoCY,IAApC,EACfX,IADe,CACV,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAb,EADE,CAAhB,CAEA,MAAO,CACHC,IAAI,CAACT,WADF,CAEHU,OAAO,CAAEN,OAFN,CAAP,CAIH,CAED,MAAO,SAASgB,CAAAA,YAAT,CAAsBC,SAAtB,CAAgCC,QAAhC,CAA0C,CAC7C;AACA,GAAMlB,CAAAA,OAAO,CAAGV,KAAK,CAACmB,GAAN,0CAA4CQ,SAA5C,iBACff,IADe,CACV,SAAAC,QAAQ,CAAK,CACf;AACA;AACA;AACAe,QAAQ,CAACC,OAAT,CAAiB,SAACD,QAAD,CAAWE,KAAX,CAAqB,CAClC;AACAjB,QAAQ,CAACC,IAAT,CAAce,OAAd,CAAsB,SAACE,WAAD,CAAcD,KAAd,CAAsB,CACxC;AACA;AACA,GAAGE,QAAQ,CAACJ,QAAQ,CAACP,EAAV,CAAR,GAA0BU,WAAW,CAACE,GAAzC,CAA8C,CAC1CpB,QAAQ,CAACC,IAAT,CAAcgB,KAAd,EAAqBI,QAArB,CAAgCN,QAAQ,CAACM,QAAzC,CACH,CACJ,CAND,EAOH,CATD,EAUA,MAAOrB,CAAAA,QAAQ,CAACC,IAAhB,CACH,CAhBe,CAAhB,CAiBA,MAAO,CACHC,IAAI,CAACR,cADF,CAEHS,OAAO,CAAEN,OAFN,CAAP,CAIH","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\nimport {USER_SERVER} from '../Config.js';\r\nimport {LOGIN_USER, SIGNUP_USER, AUTH_USER, ADD_TO_CART, GET_CART_ITEMS} from './types';\r\n\r\nexport function loginUser(dataToSubmit) {\r\n    const request = axios.post(`/api/user/login`,dataToSubmit) //데이터저장\r\n    .then(response => response.data)\r\n    return {\r\n        type:LOGIN_USER,\r\n        payload: request\r\n        //reducer에서 previousState와 action을 조합해서 nextState를 return 한다\r\n    }\r\n}\r\n\r\nexport function signUpUser(dataToSubmit) {\r\n    const request = axios.post(`/api/user/signup`,dataToSubmit) //데이터저장\r\n    .then(response => response.data)\r\n    return {\r\n        type:SIGNUP_USER,\r\n        payload: request\r\n    }\r\n}\r\n\r\nexport function auth() { //get메소드이므로 body부분 불필요\r\n    const request = axios.get(`/api/user/auth`)\r\n    .then(response => response.data)\r\n    return {\r\n        type:AUTH_USER,\r\n        payload: request\r\n    }\r\n}\r\n\r\nexport function addToCart(id,option) {\r\n    let body = {\r\n        productId : id,\r\n        productOp: option\r\n    }\r\n    const request = axios.post(`/api/product/addToCart`,body)\r\n    .then(response => response.data)\r\n    return {\r\n        type:ADD_TO_CART,\r\n        payload: request\r\n    }\r\n}\r\n\r\nexport function getCartItems(cartItems,userCart) {\r\n    //상품 아이디와 상품정보를 여러개 가져옴\r\n    const request = axios.get(`/api/product/products_by_id?id=${cartItems}&type=array`)\r\n    .then(response =>  {\r\n        //cartItem(상품 아이디값들)에 해당하는 정보들을\r\n        //product Cllection에서 가져온 후\r\n        //수량 정보를 넣어준다.\r\n        userCart.forEach((userCart, index) => {\r\n            //가져온 user > userData > 카트안의 데이터들\r\n            response.data.forEach((productData, index)=>{\r\n                //가져온 상품정보 데이터들\r\n                //유저 데이터 안에 있는 cart id값이 문자열로 저장되어있다.\r\n                if(parseInt(userCart.id) === productData._id) {\r\n                    response.data[index].quantity = userCart.quantity\r\n                }\r\n            })\r\n        })\r\n        return response.data;\r\n    });\r\n    return {\r\n        type:GET_CART_ITEMS,\r\n        payload: request\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}