{"ast":null,"code":"import _objectSpread from\"C:/webshop/shopping/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';import React,{useEffect}from'react';import{useSelector,useDispatch}from'react-redux';import{auth}from'../_actions/user_action';import{jsx as _jsx}from\"react/jsx-runtime\";export default function(SpecificComponent,option){var adminRoute=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;//null => 아무나 출입이 가능한 페이지\n//true => 로그인한 유저만 출입 가능한 페이지\n//false => 로그인한 유저는 출입 불가능한 페이지\nfunction AuthenticationCheck(props){var user=useSelector(function(state){return state.user;});var dispatch=useDispatch();useEffect(function(){dispatch(auth()).then(function(response){if(!response.payload.isAuth){//로그인 하지 않은 상태\nif(option){props.history.push('/api/user/login');}}else{//로그인 한 상태이고 어드민 권한이 없는 상태 (inAdmin이 false)\nif(adminRoute&&!response.payload.isAdmin){props.history.push('/');}if(option===false){//로그인 한 상태에서 접속할 수 없는 페이지에 접근\nprops.history.push('/');}}});},[]);return/*#__PURE__*/_jsx(SpecificComponent,_objectSpread(_objectSpread({},props),{},{user:user}));}return AuthenticationCheck;}","map":{"version":3,"sources":["C:/webshop/shopping/src/hoc/auth.js"],"names":["axios","React","useEffect","useSelector","useDispatch","auth","SpecificComponent","option","adminRoute","AuthenticationCheck","props","user","state","dispatch","then","response","payload","isAuth","history","push","isAdmin"],"mappings":"wGAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAwC,aAAxC,CACA,OAAQC,IAAR,KAAmB,yBAAnB,C,2CAEA,cAAe,UAAUC,iBAAV,CAA6BC,MAA7B,CAAwD,IAAnBC,CAAAA,UAAmB,2DAAN,IAAM,CAGnE;AACA;AACA;AACA,QAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChC,GAAIC,CAAAA,IAAI,CAAGR,WAAW,CAAC,SAAAS,KAAK,QAAIA,CAAAA,KAAK,CAACD,IAAV,EAAN,CAAtB,CACA,GAAME,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CAEAF,SAAS,CAAC,UAAK,CAEXW,QAAQ,CAACR,IAAI,EAAL,CAAR,CAAiBS,IAAjB,CAAsB,SAAAC,QAAQ,CAAI,CAG9B,GAAG,CAACA,QAAQ,CAACC,OAAT,CAAiBC,MAArB,CAA6B,CACzB;AACA,GAAGV,MAAH,CAAW,CACPG,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,iBAAnB,EACH,CACJ,CALD,IAKO,CACH;AACA,GAAGX,UAAU,EAAI,CAACO,QAAQ,CAACC,OAAT,CAAiBI,OAAnC,CAA4C,CACxCV,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EACH,CAAC,GAAGZ,MAAM,GAAK,KAAd,CAAqB,CACnB;AACAG,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EAEH,CACJ,CACJ,CAlBD,EAmBH,CArBQ,CAqBP,EArBO,CAAT,CAsBA,mBACI,KAAC,iBAAD,gCAAuBT,KAAvB,MAA8B,IAAI,CAAEC,IAApC,GADJ,CAIH,CAGD,MAAOF,CAAAA,mBAAP,CACH","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport {auth} from '../_actions/user_action'\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n\r\n\r\n    //null => 아무나 출입이 가능한 페이지\r\n    //true => 로그인한 유저만 출입 가능한 페이지\r\n    //false => 로그인한 유저는 출입 불가능한 페이지\r\n    function AuthenticationCheck(props) {\r\n        let user = useSelector(state => state.user);\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(()=> {\r\n\r\n            dispatch(auth()).then(response => {\r\n\r\n                \r\n                if(!response.payload.isAuth) {\r\n                    //로그인 하지 않은 상태\r\n                    if(option) {\r\n                        props.history.push('/api/user/login')\r\n                    }\r\n                } else {\r\n                    //로그인 한 상태이고 어드민 권한이 없는 상태 (inAdmin이 false)\r\n                    if(adminRoute && !response.payload.isAdmin) {\r\n                        props.history.push('/')\r\n                    } if(option === false) {\r\n                        //로그인 한 상태에서 접속할 수 없는 페이지에 접근\r\n                        props.history.push('/')\r\n\r\n                    }\r\n                }\r\n            })\r\n        },[])\r\n        return(\r\n            <SpecificComponent {...props} user={user}/>\r\n        )\r\n    \r\n    }\r\n\r\n\r\n    return AuthenticationCheck\r\n}"]},"metadata":{},"sourceType":"module"}